{
  "retrievedReferences": [
    {
      "content": {
        "text": "\\n    \\nImplementation steps\\n\\n\\n\\nDefine and document your workload network flows: The first step in implementing a defense-in-depth strategy is defining your workload\\u2019s traffic flows. \\n          \\n\\n\\n\\n                Create a data flow diagram that clearly defines how data is transmitted between different services that comprise your workload. This diagram is the first step to enforcing those flows through authenticated network channels.\\n              \\n\\n\\n                Instrument your workload in development and testing phases to validate that the data flow diagram accurately reflects the workload\\u2019s behavior at runtime.\\n              \\n\\n\\n                A data flow diagram can also be useful when performing a threat modeling exercise, as described in SEC01-BP07 Identify threats and prioritize mitigations using a threat model.\\n              \\n\\n\\n\\nEstablish network controls: Consider AWS capabilities to establish network controls aligned to your data flows. While network boundaries should not be the only security control, they provide a layer in the defense-in-depth strategy to protect your workload.\\n          \\n\\n\\n\\n                Use security groups to establish define and restrict data flows between resources.\\n              \\n\\n\\n                Consider using AWS PrivateLink to communicate with both AWS and third-party services that support AWS PrivateLink. Data sent through a AWS PrivateLink interface endpoint stays within the AWS network backbone and does not traverse the public Internet.\\n              \\n\\n\\n\\nImplement authentication and authorization across services in your workload: Choose the set of AWS services most appropriate to provide authenticated, encrypted traffic flows in your workload.\\n          \\n\\n\\n\\n                Consider Amazon VPC Lattice to secure service-to-service communication. VPC Lattice can use SigV4 authentication combined with auth policies to control service-to-service access.\\n              \\n\\n\\n                For service-to-service communication using mTLS, consider API Gateway or App Mesh. AWS Private CA can be used to establish a private CA hierarchy capable of issuing certificates for use with mTLS.\\n              \\n\\n\\n                When integrating with services using OAuth 2.0 or OIDC, consider API Gateway using the JWT authorizer.\\n              \\n\\n\\n                For communication between your workload and IoT devices, consider AWS IoT Core, which provides several options for network traffic encryption and authentication.\\n              \\n\\n\\n\\nMonitor for unauthorized access: Continually monitor for unintended communication channels, unauthorized principals attempting to access protected resources, and other improper access patterns.\\n          \\n\\n\\n\\n                If using VPC Lattice to manage access to your services, consider enabling and monitoring VPC Lattice access logs. These access logs include information on the requesting entity, network information including source and destination VPC, and request metadata.\\n              \\n\\n\\n                Consider enabling VPC flow logs to capture metadata on network flows and periodically review for anomalies.\\n              \\n\\n\\n                Refer to the AWS Security Incident Response Guide and the Incident Response section of the AWS Well-Architected Framework security pillar for more guidance on planning, simulating, and responding to security incidents.\\n              \\n\\n\\nResources\\n\\nRelated best practices:\\n\\n\\n\\n\\n          SEC03-BP07 Analyze public and cross-account access\\n        \\n\\n\\n          SEC02-BP02 Use temporary credentials\\n        \\n\\n\\n          SEC01-BP07 Identify threats and prioritize mitigations using a threat model\\n        \\n\\n\\nRelated documents:\\n\\n\\n\\n\\n          Evaluating access control methods to secure Amazon API Gateway APIs\\n        \\n\\n\\n          Configuring mutual TLS authentication for a REST API\\n        \\n\\n\\n          How to secure API Gateway HTTP endpoints with JWT authorizer\\n        \\n\\n\\n          Authorizing direct calls to AWS services using AWS IoT Core credential provider\\n        \\n\\nAWS Security Incident Response Guide\\n        \\n\\n\\nRelated videos:\\n\\n\\n\\nAWS re:invent 2022: Introducing VPC Lattice\\n        \\n\\nAWS re:invent 2020: Serverless API authentication for HTTP APIs on AWS\\n\\n\\nRelated examples:\\n\\n\\n\\n\\n          Amazon VPC Lattice Workshop\\n        \\n\\n\\n          Zero-Trust Episode 1 \\u2013 The Phantom Service Perimeter workshop\", \"type\": \"Document\"}"
      },
      "location": {
        "s3Location": {
          "uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/security-pillar_74_sec_protect_data_transit_authentication.txt"
        },
        "type": "S3"
      },
      "metadata": {
        "x-amz-bedrock-kb-source-uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/security-pillar_74_sec_protect_data_transit_authentication.txt",
        "x-amz-bedrock-kb-chunk-id": "1%3A0%3AH7un3ZEBQBwf1qzi3hcs",
        "x-amz-bedrock-kb-data-source-id": "LMERGMN0QJ"
      }
    },
    {
      "content": {
        "text": "\\n    \\n\\n      When traffic moves between VPCs, it's common to use VPC peering\\n      for simple routing or the AWS Transit Gateway for complex routing.\\n      With these approaches, you facilitate traffic flows between the\\n      range of IP addresses of both the source and destination networks.\\n      However, if your workload only requires traffic flows between\\n      specific components in different VPCs, consider using a\\n      point-to-point connection using\\n      AWS PrivateLink. To do this, identify which service should act\\n      as the producer and which should act as the consumer. Deploy a\\n      compatible load balancer for the producer, turn on PrivateLink\\n      accordingly, and then accept a connection request by the\\n      consumer.\\u00a0The producer service is then assigned a private IP\\n      address from the consumer's VPC that the consumer can use to make\\n      subsequent requests. This approach reduces the need to peer the\\n      networks. Include the costs for data processing and load balancing\\n      as part of evaluating PrivateLink.\\n    \\n\\n      While security groups and PrivateLink help control the flow\\n      between the components of your workloads, another major\\n      consideration is how to control which DNS domains your resources\\n      are allowed to access (if any).\\u00a0Depending on the DHCP\\n      configuration of your VPCs, you can consider two different AWS\\n      services for this purpose.\\u00a0Most customers use the default Route\\u00a053\\n      Resolver DNS service\\u00a0(also called Amazon DNS server or\\n      AmazonProvidedDNS) available to VPCs at the +2 address of its CIDR\\n      range. With this approach, you can create DNS Firewall rules and\\n      associate them to your VPC that determine what actions to take for\\n      the domain lists you supply.\\n    \\n\\n      If you are not using the Route\\u00a053 Resolver, or if you want to\\n      complement the Resolver with deeper inspection and flow control\\n      capabilities beyond domain filtering, consider deploying an AWS Network Firewall. This service inspects individual packets using\\n      either stateless or stateful rules to determine whether to deny or\\n      allow the traffic. You can take a similar approach for filtering\\n      inbound web traffic to your public endpoints using AWS WAF. For\\n      further guidance on these services, see SEC05-BP03 Implement\\n        inspection-based protection.\\n    \\nImplementation steps\\n\\n\\n\\n            Identify the required data flows between the components of\\n            your workloads.\\n          \\n\\n\\n            Apply multiple controls with a defense-in-depth approach for\\n            both inbound and outbound traffic, including the use of\\n            security groups, and route tables.\\u00a0\\n          \\n\\n\\n            Use firewalls to define fine-grained control over network\\n            traffic in, out, and across your VPCs, such as the Route\\u00a053\\n            Resolver DNS Firewall, AWS Network Firewall, and AWS WAF.\\n            Consider using the\\n            AWS Firewall Manager for centrally configuring and\\n            managing your firewall rules across your organization.\\n          \\n\\nResources\\n\\nRelated best practices:\\n\\n\\n\\n\\nREL03-BP01\\n            Choose how to segment your workload\\n\\n\\n\\nSEC09-BP02\\n            Enforce encryption in transit\\n\\n\\n\\nRelated documents:\\n\\n\\n\\n\\nSecurity\\n            best practices for your VPC\\n\\n\\n\\nAWS           Network Optimization Tips\\n\\n\\n\\nGuidance\\n            for Network Security on AWS\\n\\n\\n\\nSecure\\n            your VPC's outbound network traffic in the AWS Cloud\\n\\n\\n\\nRelated tools:\\n\\n\\n\\n\\nAWS Firewall Manager\\n\\n\\n\\nRelated videos:\\n\\n\\n\\n\\nAWS Transit Gateway reference architectures for many VPCs\\n\\n\\n\\nApplication\\n            Acceleration and Protection with Amazon CloudFront, AWS WAF,\\n            and AWS Shield\\n\\n\\n\\nAWS           re:Inforce 2023: Firewalls and where to put them\\n\\n\\n\\nRelated examples:\\n\\n\\n\\n\\nLab:\\n            CloudFront for Web Application\\n\\n\\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC05-BP01 Create network layersSEC05-BP03 Implement inspection-based protectionDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.\", \"type\": \"Document\"}"
      },
      "location": {
        "s3Location": {
          "uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/framework_316_sec_network_protection_layered.txt"
        },
        "type": "S3"
      },
      "metadata": {
        "x-amz-bedrock-kb-source-uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/framework_316_sec_network_protection_layered.txt",
        "x-amz-bedrock-kb-chunk-id": "1%3A0%3ACASo3ZEBai44BzSTVdGe",
        "x-amz-bedrock-kb-data-source-id": "LMERGMN0QJ"
      }
    },
    {
      "content": {
        "text": "\\n    \\n\\n      When traffic moves between VPCs, it's common to use VPC peering\\n      for simple routing or the AWS Transit Gateway for complex routing.\\n      With these approaches, you facilitate traffic flows between the\\n      range of IP addresses of both the source and destination networks.\\n      However, if your workload only requires traffic flows between\\n      specific components in different VPCs, consider using a\\n      point-to-point connection using\\n      AWS PrivateLink. To do this, identify which service should act\\n      as the producer and which should act as the consumer. Deploy a\\n      compatible load balancer for the producer, turn on PrivateLink\\n      accordingly, and then accept a connection request by the\\n      consumer.\\u00a0The producer service is then assigned a private IP\\n      address from the consumer's VPC that the consumer can use to make\\n      subsequent requests. This approach reduces the need to peer the\\n      networks. Include the costs for data processing and load balancing\\n      as part of evaluating PrivateLink.\\n    \\n\\n      While security groups and PrivateLink help control the flow\\n      between the components of your workloads, another major\\n      consideration is how to control which DNS domains your resources\\n      are allowed to access (if any).\\u00a0Depending on the DHCP\\n      configuration of your VPCs, you can consider two different AWS\\n      services for this purpose.\\u00a0Most customers use the default Route\\u00a053\\n      Resolver DNS service\\u00a0(also called Amazon DNS server or\\n      AmazonProvidedDNS) available to VPCs at the +2 address of its CIDR\\n      range. With this approach, you can create DNS Firewall rules and\\n      associate them to your VPC that determine what actions to take for\\n      the domain lists you supply.\\n    \\n\\n      If you are not using the Route\\u00a053 Resolver, or if you want to\\n      complement the Resolver with deeper inspection and flow control\\n      capabilities beyond domain filtering, consider deploying an AWS Network Firewall. This service inspects individual packets using\\n      either stateless or stateful rules to determine whether to deny or\\n      allow the traffic. You can take a similar approach for filtering\\n      inbound web traffic to your public endpoints using AWS WAF. For\\n      further guidance on these services, see SEC05-BP03 Implement\\n        inspection-based protection.\\n    \\nImplementation steps\\n\\n\\n\\n            Identify the required data flows between the components of\\n            your workloads.\\n          \\n\\n\\n            Apply multiple controls with a defense-in-depth approach for\\n            both inbound and outbound traffic, including the use of\\n            security groups, and route tables.\\u00a0\\n          \\n\\n\\n            Use firewalls to define fine-grained control over network\\n            traffic in, out, and across your VPCs, such as the Route\\u00a053\\n            Resolver DNS Firewall, AWS Network Firewall, and AWS WAF.\\n            Consider using the\\n            AWS Firewall Manager for centrally configuring and\\n            managing your firewall rules across your organization.\\n          \\n\\nResources\\n\\nRelated best practices:\\n\\n\\n\\n\\nREL03-BP01\\n            Choose how to segment your workload\\n\\n\\n\\nSEC09-BP02\\n            Enforce encryption in transit\\n\\n\\n\\nRelated documents:\\n\\n\\n\\n\\nSecurity\\n            best practices for your VPC\\n\\n\\n\\nAWS           Network Optimization Tips\\n\\n\\n\\nGuidance\\n            for Network Security on AWS\\n\\n\\n\\nSecure\\n            your VPC's outbound network traffic in the AWS Cloud\\n\\n\\n\\nRelated tools:\\n\\n\\n\\n\\nAWS Firewall Manager\\n\\n\\n\\nRelated videos:\\n\\n\\n\\n\\nAWS Transit Gateway reference architectures for many VPCs\\n\\n\\n\\nApplication\\n            Acceleration and Protection with Amazon CloudFront, AWS WAF,\\n            and AWS Shield\\n\\n\\n\\nAWS           re:Inforce 2023: Firewalls and where to put them\\n\\n\\n\\nRelated examples:\\n\\n\\n\\n\\nLab:\\n            CloudFront for Web Application\\n\\n\\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC05-BP01 Create network layersSEC05-BP03 Implement inspection-based protectionDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.\", \"type\": \"Document\"}"
      },
      "location": {
        "s3Location": {
          "uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/security-pillar_51_sec_network_protection_layered.txt"
        },
        "type": "S3"
      },
      "metadata": {
        "x-amz-bedrock-kb-source-uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/security-pillar_51_sec_network_protection_layered.txt",
        "x-amz-bedrock-kb-chunk-id": "1%3A0%3A6QSo3ZEBai44BzSTRNBe",
        "x-amz-bedrock-kb-data-source-id": "LMERGMN0QJ"
      }
    },
    {
      "content": {
        "text": "\\u00a0As described in the\\n      AWS       Security Reference Architecture (AWS SRA), you can define\\n      these VPCs in a dedicated\\n      Network\\n        infrastructure account. \\u00a0You can use similar techniques to\\n      centrally define the VPCs used by your workloads in other\\n      accounts, their security groups, AWS Network Firewall deployments,\\n      Route\\u00a053 Resolver rules and DNS Firewall configurations, and other\\n      network resources. \\u00a0You can share these resources with your other\\n      accounts with the\\n      AWS Resource Access Manager. \\u00a0With this approach, you can\\n      simplify the automated testing and deployment of your network\\n      controls to the Network account, with only one destination to\\n      manage. \\u00a0You can do this in a hybrid model, where you deploy and\\n      share certain controls centrally and delegate other controls to\\n      the individual workload teams and their respective accounts.\\n    \\nImplementation steps\\n\\n\\n\\n          Establish ownership over which aspects of the network and\\n          protections are defined centrally, and which your workload\\n          teams can maintain.\\n        \\n\\n\\n          Create environments to test and deploy changes to your network\\n          and its protections. \\u00a0For example, use a Network Testing\\n          account and a Network Production account.\\n        \\n\\n\\n          Determine how you will store and maintain your templates in a\\n          version control system. \\u00a0Store central templates in a\\n          repository that is distinct from workload repositories, while\\n          workload templates can be stored in repositories specific to\\n          that workload.\\n        \\n\\n\\n          Create CI/CD pipelines to test and deploy templates. \\u00a0Define\\n          tests to check for misconfigurations and that templates adhere\\n          to your company standards.\\n        \\n\\nResources\\n\\nRelated best practices:\\n\\n\\n\\n\\nSEC01-BP06\\n            Automate deployment of standard security controls\\n\\n\\n\\nRelated documents:\\n\\n\\n\\n\\nAWS           Security Reference Architecture - Network account\\n\\n\\n\\nRelated examples:\\n\\n\\n\\n\\nAWS           Deployment Pipeline Reference Architecture\\n\\n\\n\\nNetDevSecOps\\n            to modernize AWS networking deployments\\n\\n\\n\\nIntegrating\\n            AWS CloudFormation security tests with AWS Security Hub and\\n            AWS CodeBuild reports\\n\\n\\n\\nRelated tools:\\n\\n\\n\\n\\nAWS CloudFormation\\n\\n\\n\\nAWS CloudFormation Guard\\n\\n\\n\\ncfn_nag\\n\\n\\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC05-BP03 Implement inspection-based protectionSEC 6. How do you protect your compute resources?Did this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.\", \"type\": \"Document\"}"
      },
      "location": {
        "s3Location": {
          "uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/framework_318_sec_network_auto_protect.txt"
        },
        "type": "S3"
      },
      "metadata": {
        "x-amz-bedrock-kb-source-uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/framework_318_sec_network_auto_protect.txt",
        "x-amz-bedrock-kb-chunk-id": "1%3A0%3AjgSo3ZEBai44BzSTvNGb",
        "x-amz-bedrock-kb-data-source-id": "LMERGMN0QJ"
      }
    },
    {
      "content": {
        "text": "\\n      \\n\\n\\n        Relying on a central network team to define all aspects of the\\n        network, protections, and automations. \\u00a0Not delegating\\n        workload-specific aspects of the network stack and protections\\n        to that workload's team.\\n      \\n\\n\\n        Striking the right balance between centralization and delegation\\n        between a network team and workload teams, but not applying\\n        consistent testing and deployment standards across your IaC\\n        templates and CI/CD pipelines. \\u00a0Not capturing required\\n        configurations in tooling that checks your templates for\\n        adherence.\\n      \\n\\nBenefits of establishing this best\\n      practice:\\u00a0Using templates to define your network\\n    protections allows you to track and compare changes over time with a\\n    version control system. \\u00a0Using automation to test and deploy changes\\n    creates standardization and predictability, increasing the chances\\n    of a successful deployment and reducing repetitive manual\\n    configurations.\\n  \\nLevel of risk exposed if this best practice\\n      is not established: Medium\\u00a0\\n  \\nImplementation guidance\\n\\n      A number of network protection controls described in\\n      SEC05-BP02 Control traffic flows\\n        within your network layers and\\n      SEC05-BP03 Implement\\n        inspection-based protection come with managed rules systems\\n      that can update automatically based on the latest threat\\n      intelligence. \\u00a0Examples of protecting your web endpoints include\\n      AWS WAF managed rules\\u00a0and\\n      AWS Shield Advanced automatic application layer DDoS\\n        mitigation.\\n      Use\\u00a0AWS Network Firewall managed rule groups\\u00a0to stay up to date\\n      with low-reputation domain lists and threat signatures as well.\\n    \\n\\n      Beyond managed rules, we recommend you use DevOps practices to\\n      automate deploying your network resources, protections, and the\\n      rules you specify. \\u00a0You can capture these definitions in\\n      AWS CloudFormation or another infrastructure as\\n        code (IaC)\\u00a0tool of your choice, commit them to a\\n      version control system, and deploy them using CI/CD pipelines.\\n      \\u00a0Use this approach to gain the traditional benefits of DevOps for\\n      managing your network controls, such as more predictable releases,\\n      automated testing using tools like\\n      AWS CloudFormation Guard, and detecting drift between your\\n      deployed environment and your desired configuration.\\n    \\n\\n      Based on the decisions you made as part of\\n      SEC05-BP01 Create network\\n        layers, you may have a central management approach to\\n      creating VPCs that are dedicated for ingress, egress, and\\n      inspection flows. \\u00a0As described in the\\n      AWS       Security Reference Architecture (AWS SRA), you can define\\n      these VPCs in a dedicated\\n      Network\\n        infrastructure account. \\u00a0You can use similar techniques to\\n      centrally define the VPCs used by your workloads in other\\n      accounts, their security groups, AWS Network Firewall deployments,\\n      Route\\u00a053 Resolver rules and DNS Firewall configurations, and other\\n      network resources. \\u00a0You can share these resources with your other\\n      accounts with the\\n      AWS Resource Access Manager. \\u00a0With this approach, you can\\n      simplify the automated testing and deployment of your network\\n      controls to the Network account, with only one destination to\\n      manage. \\u00a0You can do this in a hybrid model, where you deploy and\\n      share certain controls centrally and delegate other controls to\\n      the individual workload teams and their respective accounts.\\n    \\nImplementation steps\\n\\n\\n\\n          Establish ownership over which aspects of the network and\\n          protections are defined centrally, and which your workload\\n          teams can maintain.\\n        \\n\\n\\n          Create environments to test and deploy changes to your network\\n          and its protections. \\u00a0For example, use a Network Testing\\n          account and a Network Production account.\\n        \\n\\n\\n          Determine how you will store and maintain your templates in a\\n          version control system. \\u00a0Store central templates in a\\n          repository that is distinct from workload repositories, while\\n          workload templates can be stored in repositories specific to\\n          that workload.\\n        \\n\\n\\n          Create CI/CD pipelines to test and deploy templates. \\u00a0Define\\n          tests to check for misconfigurations and that templates adhere\\n          to your company standards."
      },
      "location": {
        "s3Location": {
          "uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/framework_318_sec_network_auto_protect.txt"
        },
        "type": "S3"
      },
      "metadata": {
        "x-amz-bedrock-kb-source-uri": "s3://l27cf2d4-agent-kb-122610495479/kbaws_l27cf2d4/framework_318_sec_network_auto_protect.txt",
        "x-amz-bedrock-kb-chunk-id": "1%3A0%3AjQSo3ZEBai44BzSTvNGb",
        "x-amz-bedrock-kb-data-source-id": "LMERGMN0QJ"
      }
    }
  ]
}